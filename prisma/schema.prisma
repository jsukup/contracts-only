// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User profile information
  title         String?
  bio           String?
  location      String?
  website       String?
  linkedinUrl   String?
  hourlyRateMin Int?
  hourlyRateMax Int?
  availability  AvailabilityStatus @default(AVAILABLE)

  // Job preferences and settings
  jobAlertsEnabled Boolean @default(true)
  desiredRateMin   Int?
  desiredRateMax   Int?

  accounts      Account[]
  sessions      Session[]
  jobsPosted    Job[]     @relation("JobPoster")
  applications  JobApplication[]
  userSkills    UserSkill[]
  emailJobs     EmailJob[] @relation("EmailRecipient")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Job board specific models
model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  company     String
  location    String?
  isRemote    Boolean  @default(false)
  jobType     JobType  @default(CONTRACT)
  
  // Rate information
  hourlyRateMin     Int
  hourlyRateMax     Int
  currency          String @default("USD")
  
  // Job details
  contractDuration  String?  // e.g., "3 months", "6 weeks"
  hoursPerWeek      Int?
  startDate         DateTime?
  
  // Application details
  applicationUrl    String?
  applicationEmail  String?
  
  // Meta information
  postedById   String
  postedBy     User     @relation("JobPoster", fields: [postedById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime @default(now())
  isActive     Boolean  @default(true)
  
  // Relations
  jobSkills    JobSkill[]
  applications JobApplication[]
  emailJobs    EmailJob[]
  
  @@index([isActive, expiresAt])
  @@index([jobType, isRemote])
  @@index([hourlyRateMin, hourlyRateMax])
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String?  // e.g., "Programming", "Design", "Marketing"
  createdAt DateTime @default(now())
  
  jobSkills  JobSkill[]
  userSkills UserSkill[]
}

model JobSkill {
  id      String @id @default(cuid())
  jobId   String
  skillId String
  
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, skillId])
}

model UserSkill {
  id      String @id @default(cuid())
  userId  String
  skillId String
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillId])
}

model JobApplication {
  id        String    @id @default(cuid())
  jobId     String
  userId    String
  appliedAt DateTime  @default(now())
  status    ApplicationStatus @default(PENDING)
  
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, userId])
  @@index([status])
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
  EMPLOYER
}

enum JobType {
  CONTRACT
  FREELANCE
  PART_TIME
  TEMPORARY
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  NOT_LOOKING
}

enum ApplicationStatus {
  PENDING
  VIEWED
  REJECTED
  ACCEPTED
}

// Email automation models
model EmailJob {
  id        String    @id @default(cuid())
  type      EmailType
  recipientId String
  jobId     String?
  data      Json      // Store email template data
  status    EmailJobStatus @default(PENDING)
  scheduledAt DateTime
  sentAt    DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  recipient User @relation("EmailRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  job       Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@index([status, scheduledAt])
  @@index([type, recipientId])
}

enum EmailType {
  JOB_APPLICATION_NOTIFICATION
  JOB_POSTING_CONFIRMATION
  WEEKLY_DIGEST
  APPLICATION_STATUS_UPDATE
}

enum EmailJobStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}