// Generated by /test-generate-job-board --component JobCard

import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { JobCard } from '../JobCard'
import { createTestWrapper } from '../../../tests/utils/testing-helpers'

// Mock Next.js router
jest.mock('next/link', () => {
  return ({ children, href, ...props }: any) => (
    <a href={href} {...props}>
      {children}
    </a>
  )
})

describe('JobCard', () => {
  const mockJob = {
    id: 'job-123',
    title: 'Senior React Developer',
    company: 'TechCorp Inc.',
    location: 'San Francisco, CA',
    isRemote: false,
    jobType: 'CONTRACT',
    hourlyRateMin: 80,
    hourlyRateMax: 120,
    currency: 'USD',
    contractDuration: '6 months',
    hoursPerWeek: 40,
    createdAt: '2024-01-15T10:00:00Z',
    jobSkills: [
      { skill: { id: 'skill-1', name: 'React' } },
      { skill: { id: 'skill-2', name: 'TypeScript' } },
      { skill: { id: 'skill-3', name: 'Node.js' } }
    ],
    _count: {
      applications: 12
    }
  }

  const defaultProps = {
    job: mockJob,
    showActions: true
  }

  describe('Component Rendering', () => {
    it('renders job title as a clickable link', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const titleLink = screen.getByRole('link', { name: mockJob.title })
      expect(titleLink).toBeInTheDocument()
      expect(titleLink).toHaveAttribute('href', `/jobs/${mockJob.id}`)
      expect(titleLink).toHaveAttribute('data-track', 'view-job')
    })

    it('displays company name with building icon', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const companyElement = screen.getByTestId('job-company') || 
                            screen.getByText(mockJob.company).closest('span')
      expect(companyElement).toBeInTheDocument()
      expect(companyElement).toHaveTextContent(mockJob.company)
    })

    it('shows location when job is not remote', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText(mockJob.location!)).toBeInTheDocument()
    })

    it('shows "Remote" when job is remote', () => {
      const remoteJob = { ...mockJob, isRemote: true }
      render(<JobCard job={remoteJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Remote')).toBeInTheDocument()
    })

    it('displays job type badge with correct variant', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const badge = screen.getByText('CONTRACT')
      expect(badge).toBeInTheDocument()
      expect(badge).toHaveClass('badge')
    })

    it('formats and displays hourly rate correctly', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const rateElement = screen.getByTestId('job-rate') ||
                         screen.getByText('$80-$120/hr')
      expect(rateElement).toBeInTheDocument()
      expect(rateElement).toHaveTextContent('$80-$120/hr')
    })

    it('displays contract duration when provided', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText(mockJob.contractDuration!)).toBeInTheDocument()
    })

    it('displays hours per week when provided', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('40 hrs/week')).toBeInTheDocument()
    })

    it('shows application count when provided', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('12 applicants')).toBeInTheDocument()
    })

    it('renders skill badges correctly', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('React')).toBeInTheDocument()
      expect(screen.getByText('TypeScript')).toBeInTheDocument()
      expect(screen.getByText('Node.js')).toBeInTheDocument()
    })

    it('shows "+X more" when there are more than 5 skills', () => {
      const jobWithManySkills = {
        ...mockJob,
        jobSkills: [
          { skill: { id: 'skill-1', name: 'React' } },
          { skill: { id: 'skill-2', name: 'TypeScript' } },
          { skill: { id: 'skill-3', name: 'Node.js' } },
          { skill: { id: 'skill-4', name: 'Express' } },
          { skill: { id: 'skill-5', name: 'MongoDB' } },
          { skill: { id: 'skill-6', name: 'AWS' } },
          { skill: { id: 'skill-7', name: 'Docker' } }
        ]
      }

      render(<JobCard job={jobWithManySkills} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('+2 more')).toBeInTheDocument()
    })
  })

  describe('Date Formatting', () => {
    it('shows "Today" for jobs posted today', () => {
      const today = new Date().toISOString()
      const todayJob = { ...mockJob, createdAt: today }
      
      render(<JobCard job={todayJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Posted Today')).toBeInTheDocument()
    })

    it('shows "Yesterday" for jobs posted yesterday', () => {
      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
      const yesterdayJob = { ...mockJob, createdAt: yesterday }
      
      render(<JobCard job={yesterdayJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Posted Yesterday')).toBeInTheDocument()
    })

    it('shows days ago for recent jobs', () => {
      const threeDaysAgo = new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
      const recentJob = { ...mockJob, createdAt: threeDaysAgo }
      
      render(<JobCard job={recentJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Posted 3 days ago')).toBeInTheDocument()
    })

    it('shows weeks ago for older jobs', () => {
      const twoWeeksAgo = new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()
      const olderJob = { ...mockJob, createdAt: twoWeeksAgo }
      
      render(<JobCard job={olderJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Posted 2 weeks ago')).toBeInTheDocument()
    })
  })

  describe('Job Type Badge Variants', () => {
    const jobTypes = [
      { type: 'CONTRACT', expectedVariant: 'default' },
      { type: 'FREELANCE', expectedVariant: 'secondary' },
      { type: 'PART_TIME', expectedVariant: 'outline' },
      { type: 'TEMPORARY', expectedVariant: 'destructive' }
    ]

    jobTypes.forEach(({ type, expectedVariant }) => {
      it(`applies correct variant for ${type} job type`, () => {
        const jobWithType = { ...mockJob, jobType: type }
        render(<JobCard job={jobWithType} />, { wrapper: createTestWrapper() })
        
        const badge = screen.getByText(type.replace('_', ' '))
        expect(badge).toBeInTheDocument()
        // Note: Actual variant class checking would depend on your badge implementation
      })
    })
  })

  describe('Action Buttons', () => {
    it('shows action buttons when showActions is true', () => {
      render(<JobCard {...defaultProps} showActions={true} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByRole('link', { name: 'View Details' })).toBeInTheDocument()
      expect(screen.getByRole('link', { name: 'Apply Now' })).toBeInTheDocument()
    })

    it('hides action buttons when showActions is false', () => {
      render(<JobCard {...defaultProps} showActions={false} />, { wrapper: createTestWrapper() })
      
      expect(screen.queryByRole('link', { name: 'View Details' })).not.toBeInTheDocument()
      expect(screen.queryByRole('link', { name: 'Apply Now' })).not.toBeInTheDocument()
    })

    it('apply button has correct tracking attributes', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const applyButton = screen.getByRole('link', { name: 'Apply Now' })
      expect(applyButton).toHaveAttribute('href', `/jobs/${mockJob.id}/apply`)
      expect(applyButton).toHaveAttribute('data-track', 'apply-job')
    })

    it('view details button links to job detail page', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const viewButton = screen.getByRole('link', { name: 'View Details' })
      expect(viewButton).toHaveAttribute('href', `/jobs/${mockJob.id}`)
    })
  })

  describe('Edge Cases and Error Handling', () => {
    it('handles missing optional fields gracefully', () => {
      const minimalJob = {
        id: 'job-456',
        title: 'Basic Job',
        company: 'Basic Corp',
        isRemote: true,
        jobType: 'CONTRACT',
        hourlyRateMin: null,
        hourlyRateMax: null,
        currency: 'USD',
        createdAt: '2024-01-15T10:00:00Z'
      }

      render(<JobCard job={minimalJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Basic Job')).toBeInTheDocument()
      expect(screen.getByText('Basic Corp')).toBeInTheDocument()
      expect(screen.getByText('Remote')).toBeInTheDocument()
      expect(screen.queryByTestId('job-rate')).not.toBeInTheDocument()
    })

    it('handles empty skills array', () => {
      const jobWithoutSkills = { ...mockJob, jobSkills: [] }
      
      render(<JobCard job={jobWithoutSkills} />, { wrapper: createTestWrapper() })
      
      expect(screen.queryByText('React')).not.toBeInTheDocument()
      expect(screen.queryByText('TypeScript')).not.toBeInTheDocument()
    })

    it('handles missing location when not remote', () => {
      const jobWithoutLocation = { ...mockJob, location: undefined, isRemote: false }
      
      render(<JobCard job={jobWithoutLocation} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Not specified')).toBeInTheDocument()
    })

    it('handles missing application count', () => {
      const jobWithoutCount = { ...mockJob, _count: undefined }
      
      render(<JobCard job={jobWithoutCount} />, { wrapper: createTestWrapper() })
      
      expect(screen.queryByText(/applicants/)).not.toBeInTheDocument()
    })
  })

  describe('Accessibility', () => {
    it('has proper semantic structure', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Should have article role for the card
      const card = screen.getByRole('article') || screen.getByTestId('job-card')
      expect(card).toBeInTheDocument()
    })

    it('has descriptive link text', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const titleLink = screen.getByRole('link', { name: mockJob.title })
      expect(titleLink).toBeInTheDocument()
      
      const viewLink = screen.getByRole('link', { name: 'View Details' })
      expect(viewLink).toBeInTheDocument()
      
      const applyLink = screen.getByRole('link', { name: 'Apply Now' })
      expect(applyLink).toBeInTheDocument()
    })

    it('has proper data attributes for tracking', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const card = screen.getByTestId('job-card') || 
                  screen.getByRole('article')
      expect(card).toHaveAttribute('data-job-id', mockJob.id)
    })
  })

  describe('Currency Formatting', () => {
    it('formats USD currency with dollar symbol', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('$80-$120/hr')).toBeInTheDocument()
    })

    it('handles non-USD currency', () => {
      const eurJob = { ...mockJob, currency: 'EUR' }
      render(<JobCard job={eurJob} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('EUR80-EUR120/hr')).toBeInTheDocument()
    })
  })

  describe('Hover and Interactive States', () => {
    it('applies hover classes for interactive elements', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const card = screen.getByRole('article') || screen.getByTestId('job-card')
      expect(card).toHaveClass('hover:shadow-lg')
      expect(card).toHaveClass('transition-shadow')
    })

    it('title link has hover styles', () => {
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const titleLink = screen.getByRole('link', { name: mockJob.title })
      expect(titleLink).toHaveClass('hover:text-primary')
    })
  })

  describe('Performance Considerations', () => {
    it('renders quickly with minimal props', () => {
      const startTime = performance.now()
      
      render(<JobCard {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const endTime = performance.now()
      const renderTime = endTime - startTime
      
      // Should render in under 50ms
      expect(renderTime).toBeLessThan(50)
    })

    it('handles large numbers of skills efficiently', () => {
      const jobWithManySkills = {
        ...mockJob,
        jobSkills: Array.from({ length: 20 }, (_, i) => ({
          skill: { id: `skill-${i}`, name: `Skill ${i}` }
        }))
      }

      const startTime = performance.now()
      
      render(<JobCard job={jobWithManySkills} />, { wrapper: createTestWrapper() })
      
      const endTime = performance.now()
      const renderTime = endTime - startTime
      
      // Should still render efficiently
      expect(renderTime).toBeLessThan(100)
      
      // Should only display first 5 skills + "more" indicator
      expect(screen.getByText('+15 more')).toBeInTheDocument()
    })
  })
})