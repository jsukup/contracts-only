// Generated by /test-generate-job-board --component JobPostForm

import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { JobPostForm } from '../JobPostForm'
import { createTestWrapper } from '../../../tests/utils/testing-helpers'

// Mock Next.js router
const mockPush = jest.fn()
const mockBack = jest.fn()

jest.mock('next/navigation', () => ({
  useRouter: () => ({
    push: mockPush,
    back: mockBack
  })
}))

// Mock fetch for API calls
global.fetch = jest.fn()

describe('JobPostForm', () => {
  const mockSkills = [
    { id: 'skill-1', name: 'React', category: 'Frontend' },
    { id: 'skill-2', name: 'Node.js', category: 'Backend' },
    { id: 'skill-3', name: 'TypeScript', category: 'Programming Languages' },
    { id: 'skill-4', name: 'AWS', category: 'Cloud' },
    { id: 'skill-5', name: 'Docker', category: 'DevOps' }
  ]

  const defaultProps = {
    skills: mockSkills,
    initialData: null
  }

  beforeEach(() => {
    jest.clearAllMocks()
    ;(global.fetch as jest.Mock).mockClear()
  })

  describe('Component Rendering', () => {
    it('renders form with all required fields for new job posting', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Post a New Job')).toBeInTheDocument()
      expect(screen.getByLabelText(/job title/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/company/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/job description/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/min rate\/hour/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/max rate\/hour/i)).toBeInTheDocument()
    })

    it('renders form with edit mode when initialData is provided', () => {
      const initialData = {
        id: 'job-123',
        title: 'Senior React Developer',
        company: 'TechCorp',
        description: 'Looking for an experienced React developer'
      }

      render(<JobPostForm {...defaultProps} initialData={initialData} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Edit Job Posting')).toBeInTheDocument()
      expect(screen.getByDisplayValue('Senior React Developer')).toBeInTheDocument()
      expect(screen.getByDisplayValue('TechCorp')).toBeInTheDocument()
      expect(screen.getByDisplayValue('Looking for an experienced React developer')).toBeInTheDocument()
    })

    it('groups skills by category correctly', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByText('Frontend')).toBeInTheDocument()
      expect(screen.getByText('Backend')).toBeInTheDocument()
      expect(screen.getByText('Programming Languages')).toBeInTheDocument()
      expect(screen.getByText('Cloud')).toBeInTheDocument()
      expect(screen.getByText('DevOps')).toBeInTheDocument()
    })

    it('displays all job type options', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const jobTypeSelect = screen.getByRole('combobox', { name: /job type/i })
      fireEvent.click(jobTypeSelect)
      
      expect(screen.getByText('Contract')).toBeInTheDocument()
      expect(screen.getByText('Freelance')).toBeInTheDocument()
      expect(screen.getByText('Part Time')).toBeInTheDocument()
      expect(screen.getByText('Temporary')).toBeInTheDocument()
    })

    it('displays remote work options', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const remoteSelect = screen.getByRole('combobox', { name: /remote work/i })
      fireEvent.click(remoteSelect)
      
      expect(screen.getByText('On-site')).toBeInTheDocument()
      expect(screen.getByText('Remote')).toBeInTheDocument()
    })
  })

  describe('Form Validation', () => {
    it('validates required fields on submission', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const submitButton = screen.getByRole('button', { name: /post job/i })
      await user.click(submitButton)
      
      // Required fields should prevent form submission
      const titleInput = screen.getByLabelText(/job title/i)
      const companyInput = screen.getByLabelText(/company/i)
      const descriptionInput = screen.getByLabelText(/job description/i)
      const minRateInput = screen.getByLabelText(/min rate\/hour/i)
      const maxRateInput = screen.getByLabelText(/max rate\/hour/i)
      
      expect(titleInput).toBeRequired()
      expect(companyInput).toBeRequired()
      expect(descriptionInput).toBeRequired()
      expect(minRateInput).toBeRequired()
      expect(maxRateInput).toBeRequired()
    })

    it('validates URL format for application URL', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const urlInput = screen.getByLabelText(/application url/i)
      await user.type(urlInput, 'invalid-url')
      
      // Browser validation should handle URL format
      expect(urlInput).toHaveAttribute('type', 'url')
    })

    it('validates email format for application email', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const emailInput = screen.getByLabelText(/application email/i)
      await user.type(emailInput, 'invalid-email')
      
      // Browser validation should handle email format
      expect(emailInput).toHaveAttribute('type', 'email')
    })

    it('validates numeric inputs for rates and hours', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const minRateInput = screen.getByLabelText(/min rate\/hour/i)
      const maxRateInput = screen.getByLabelText(/max rate\/hour/i)
      const hoursInput = screen.getByLabelText(/hours\/week/i)
      
      expect(minRateInput).toHaveAttribute('type', 'number')
      expect(maxRateInput).toHaveAttribute('type', 'number')
      expect(hoursInput).toHaveAttribute('type', 'number')
    })
  })

  describe('User Interactions', () => {
    it('handles form input changes correctly', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const titleInput = screen.getByLabelText(/job title/i)
      const companyInput = screen.getByLabelText(/company/i)
      
      await user.type(titleInput, 'Full Stack Developer')
      await user.type(companyInput, 'StartupXYZ')
      
      expect(titleInput).toHaveValue('Full Stack Developer')
      expect(companyInput).toHaveValue('StartupXYZ')
    })

    it('handles skill selection and deselection', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const reactSkill = screen.getByText('React')
      const nodeSkill = screen.getByText('Node.js')
      
      // Select skills
      await user.click(reactSkill)
      await user.click(nodeSkill)
      
      // Skills should be visually selected (implementation dependent)
      expect(reactSkill).toBeInTheDocument()
      expect(nodeSkill).toBeInTheDocument()
      
      // Deselect a skill
      await user.click(reactSkill)
      
      // React should be deselected while Node.js remains selected
    })

    it('handles job type selection', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const jobTypeSelect = screen.getByRole('combobox', { name: /job type/i })
      await user.click(jobTypeSelect)
      
      const freelanceOption = screen.getByText('Freelance')
      await user.click(freelanceOption)
      
      // The select should now show Freelance as selected
      expect(jobTypeSelect).toBeInTheDocument()
    })

    it('handles remote work toggle', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const remoteSelect = screen.getByRole('combobox', { name: /remote work/i })
      await user.click(remoteSelect)
      
      const remoteOption = screen.getByText('Remote')
      await user.click(remoteOption)
      
      expect(remoteSelect).toBeInTheDocument()
    })

    it('handles date input for start date', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const dateInput = screen.getByLabelText(/start date/i)
      await user.type(dateInput, '2024-06-15')
      
      expect(dateInput).toHaveValue('2024-06-15')
    })
  })

  describe('Form Submission', () => {
    it('submits form with correct data for new job posting', async () => {
      const user = userEvent.setup()
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => ({ id: 'new-job-123' })
      })

      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Fill required fields
      await user.type(screen.getByLabelText(/job title/i), 'Senior React Developer')
      await user.type(screen.getByLabelText(/company/i), 'TechCorp')
      await user.type(screen.getByLabelText(/job description/i), 'Looking for an experienced React developer')
      await user.type(screen.getByLabelText(/min rate\/hour/i), '80')
      await user.type(screen.getByLabelText(/max rate\/hour/i), '120')
      
      // Select some skills
      await user.click(screen.getByText('React'))
      await user.click(screen.getByText('TypeScript'))
      
      const submitButton = screen.getByRole('button', { name: /post job/i })
      await user.click(submitButton)
      
      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/jobs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: expect.stringContaining('"title":"Senior React Developer"')
        })
      })
      
      await waitFor(() => {
        expect(mockPush).toHaveBeenCalledWith('/jobs/new-job-123')
      })
    })

    it('submits form with correct data for job editing', async () => {
      const user = userEvent.setup()
      const initialData = {
        id: 'job-123',
        title: 'React Developer',
        company: 'TechCorp'
      }
      
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => ({ id: 'job-123' })
      })

      render(<JobPostForm {...defaultProps} initialData={initialData} />, { wrapper: createTestWrapper() })
      
      const submitButton = screen.getByRole('button', { name: /update job/i })
      await user.click(submitButton)
      
      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/jobs/job-123', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: expect.any(String)
        })
      })
    })

    it('shows loading state during submission', async () => {
      const user = userEvent.setup()
      ;(global.fetch as jest.Mock).mockImplementation(
        () => new Promise(resolve => setTimeout(() => resolve({
          ok: true,
          json: async () => ({ id: 'job-123' })
        }), 1000))
      )

      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Fill required fields
      await user.type(screen.getByLabelText(/job title/i), 'Test Job')
      await user.type(screen.getByLabelText(/company/i), 'Test Company')
      await user.type(screen.getByLabelText(/job description/i), 'Test description')
      await user.type(screen.getByLabelText(/min rate\/hour/i), '50')
      await user.type(screen.getByLabelText(/max rate\/hour/i), '100')
      
      const submitButton = screen.getByRole('button', { name: /post job/i })
      await user.click(submitButton)
      
      expect(screen.getByText('Saving...')).toBeInTheDocument()
      expect(submitButton).toBeDisabled()
    })

    it('handles submission errors gracefully', async () => {
      const user = userEvent.setup()
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {})
      const alertSpy = jest.spyOn(window, 'alert').mockImplementation(() => {})
      
      ;(global.fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'))

      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Fill required fields
      await user.type(screen.getByLabelText(/job title/i), 'Test Job')
      await user.type(screen.getByLabelText(/company/i), 'Test Company')
      await user.type(screen.getByLabelText(/job description/i), 'Test description')
      await user.type(screen.getByLabelText(/min rate\/hour/i), '50')
      await user.type(screen.getByLabelText(/max rate\/hour/i), '100')
      
      const submitButton = screen.getByRole('button', { name: /post job/i })
      await user.click(submitButton)
      
      await waitFor(() => {
        expect(consoleSpy).toHaveBeenCalledWith('Error saving job:', expect.any(Error))
        expect(alertSpy).toHaveBeenCalledWith('Failed to save job. Please try again.')
      })
      
      consoleSpy.mockRestore()
      alertSpy.mockRestore()
    })

    it('handles API error responses', async () => {
      const user = userEvent.setup()
      const alertSpy = jest.spyOn(window, 'alert').mockImplementation(() => {})
      
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: false,
        status: 400
      })

      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Fill and submit form
      await user.type(screen.getByLabelText(/job title/i), 'Test Job')
      await user.type(screen.getByLabelText(/company/i), 'Test Company')
      await user.type(screen.getByLabelText(/job description/i), 'Test description')
      await user.type(screen.getByLabelText(/min rate\/hour/i), '50')
      await user.type(screen.getByLabelText(/max rate\/hour/i), '100')
      
      await user.click(screen.getByRole('button', { name: /post job/i }))
      
      await waitFor(() => {
        expect(alertSpy).toHaveBeenCalledWith('Failed to save job. Please try again.')
      })
      
      alertSpy.mockRestore()
    })
  })

  describe('Navigation', () => {
    it('handles cancel button click', async () => {
      const user = userEvent.setup()
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const cancelButton = screen.getByRole('button', { name: /cancel/i })
      await user.click(cancelButton)
      
      expect(mockBack).toHaveBeenCalled()
    })
  })

  describe('Data Processing', () => {
    it('converts string numbers to integers for submission', async () => {
      const user = userEvent.setup()
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => ({ id: 'job-123' })
      })

      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      await user.type(screen.getByLabelText(/job title/i), 'Test Job')
      await user.type(screen.getByLabelText(/company/i), 'Test Company')
      await user.type(screen.getByLabelText(/job description/i), 'Test description')
      await user.type(screen.getByLabelText(/min rate\/hour/i), '75')
      await user.type(screen.getByLabelText(/max rate\/hour/i), '125')
      await user.type(screen.getByLabelText(/hours\/week/i), '40')
      
      await user.click(screen.getByRole('button', { name: /post job/i }))
      
      await waitFor(() => {
        const callArgs = (global.fetch as jest.Mock).mock.calls[0]
        const requestBody = JSON.parse(callArgs[1].body)
        
        expect(requestBody.hourlyRateMin).toBe(75)
        expect(requestBody.hourlyRateMax).toBe(125)
        expect(requestBody.hoursPerWeek).toBe(40)
      })
    })

    it('handles null values for optional numeric fields', async () => {
      const user = userEvent.setup()
      ;(global.fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => ({ id: 'job-123' })
      })

      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Fill only required fields
      await user.type(screen.getByLabelText(/job title/i), 'Test Job')
      await user.type(screen.getByLabelText(/company/i), 'Test Company')
      await user.type(screen.getByLabelText(/job description/i), 'Test description')
      await user.type(screen.getByLabelText(/min rate\/hour/i), '50')
      await user.type(screen.getByLabelText(/max rate\/hour/i), '100')
      
      await user.click(screen.getByRole('button', { name: /post job/i }))
      
      await waitFor(() => {
        const callArgs = (global.fetch as jest.Mock).mock.calls[0]
        const requestBody = JSON.parse(callArgs[1].body)
        
        expect(requestBody.hoursPerWeek).toBeNull()
        expect(requestBody.startDate).toBeNull()
      })
    })
  })

  describe('Initial Data Loading', () => {
    it('populates form fields with initial data', () => {
      const initialData = {
        id: 'job-123',
        title: 'Senior React Developer',
        company: 'TechCorp',
        description: 'Looking for an experienced developer',
        location: 'San Francisco, CA',
        isRemote: true,
        jobType: 'FREELANCE',
        hourlyRateMin: 90,
        hourlyRateMax: 130,
        currency: 'USD',
        contractDuration: '6 months',
        hoursPerWeek: 40,
        startDate: '2024-06-15T00:00:00Z',
        applicationUrl: 'https://company.com/apply',
        applicationEmail: 'jobs@company.com',
        jobSkills: [
          { skillId: 'skill-1' },
          { skillId: 'skill-3' }
        ]
      }

      render(<JobPostForm {...defaultProps} initialData={initialData} />, { wrapper: createTestWrapper() })
      
      expect(screen.getByDisplayValue('Senior React Developer')).toBeInTheDocument()
      expect(screen.getByDisplayValue('TechCorp')).toBeInTheDocument()
      expect(screen.getByDisplayValue('Looking for an experienced developer')).toBeInTheDocument()
      expect(screen.getByDisplayValue('San Francisco, CA')).toBeInTheDocument()
      expect(screen.getByDisplayValue('90')).toBeInTheDocument()
      expect(screen.getByDisplayValue('130')).toBeInTheDocument()
      expect(screen.getByDisplayValue('6 months')).toBeInTheDocument()
      expect(screen.getByDisplayValue('40')).toBeInTheDocument()
      expect(screen.getByDisplayValue('2024-06-15')).toBeInTheDocument()
      expect(screen.getByDisplayValue('https://company.com/apply')).toBeInTheDocument()
      expect(screen.getByDisplayValue('jobs@company.com')).toBeInTheDocument()
    })
  })

  describe('Accessibility', () => {
    it('has proper form labels and structure', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // All form fields should have proper labels
      expect(screen.getByLabelText(/job title/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/company/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/job description/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/min rate\/hour/i)).toBeInTheDocument()
      expect(screen.getByLabelText(/max rate\/hour/i)).toBeInTheDocument()
    })

    it('has proper form structure with fieldsets', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      // Form should have semantic sections
      expect(screen.getByText('Basic Information')).toBeInTheDocument()
      expect(screen.getByText('Compensation & Schedule')).toBeInTheDocument()
      expect(screen.getByText('Application Process')).toBeInTheDocument()
      expect(screen.getByText('Required Skills')).toBeInTheDocument()
    })

    it('has required field indicators', () => {
      render(<JobPostForm {...defaultProps} />, { wrapper: createTestWrapper() })
      
      const requiredFields = screen.getAllByText('*')
      expect(requiredFields.length).toBeGreaterThan(0)
    })
  })
})