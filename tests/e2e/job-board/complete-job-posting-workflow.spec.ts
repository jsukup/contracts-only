// Generated by /test-generate-job-board --workflow job-posting

import { test, expect } from '@playwright/test'
import { E2EHelpers, createE2EJobData } from '../e2e-helpers'
import { dbTestHelper } from '../../setup/database-setup'

test.describe('Complete Job Posting Workflow - Generated', () => {
  let helpers: E2EHelpers

  test.beforeEach(async ({ page }) => {
    helpers = new E2EHelpers(page)
  })

  test.afterEach(async () => {
    await dbTestHelper.cleanupTestData()
  })

  test('Employer completes full job posting workflow', async ({ page }) => {
    test.step('Authentication and navigation', async () => {
      // Create test employer account
      const employer = await dbTestHelper.createTestUser('employer', {
        name: 'Test Employer',
        email: 'employer@jobtest.com',
        company: 'TechCorp Inc.'
      })
      
      await helpers.loginAsEmployer('employer@jobtest.com', 'TestPassword123!')
      await helpers.navigateToJobPosting()
      
      // Verify job posting form loads
      await helpers.verifyElementExists('[data-testid="job-post-form"]')
      await helpers.verifyElementExists('[data-testid="job-title-input"]')
      
      await helpers.takeScreenshot('job-posting-form-loaded')
    })

    test.step('Form completion with comprehensive data', async () => {
      const jobData = createE2EJobData({
        title: 'Senior Full Stack Developer - E2E Test',
        company: 'E2E Testing Corp',
        location: 'San Francisco, CA',
        jobType: 'CONTRACT',
        salaryMin: '90',
        salaryMax: '140',
        description: 'We are looking for an experienced full stack developer with expertise in React, Node.js, and modern web technologies. This is a comprehensive E2E test job posting to validate the complete workflow.',
        requirements: 'Must have:\n• 5+ years of React experience\n• Strong Node.js background\n• Experience with TypeScript\n• Knowledge of cloud technologies (AWS/Azure)',
        applicationUrl: 'https://e2e-test-company.com/apply',
        applicationEmail: 'jobs@e2etest.com',
        contractDuration: '6 months',
        hoursPerWeek: '40',
        startDate: '2024-06-15',
        isRemote: false
      })

      // Fill basic information
      await helpers.fillJobBasicInfo({
        title: jobData.title,
        company: jobData.company,
        description: jobData.description
      })

      // Fill location and job type
      await helpers.selectJobType(jobData.jobType)
      await helpers.fillLocation(jobData.location)
      await helpers.setRemoteStatus(jobData.isRemote)

      // Fill compensation details  
      await helpers.fillCompensationDetails({
        minRate: jobData.salaryMin,
        maxRate: jobData.salaryMax,
        contractDuration: jobData.contractDuration,
        hoursPerWeek: jobData.hoursPerWeek,
        startDate: jobData.startDate
      })

      // Fill application details
      await helpers.fillApplicationDetails({
        applicationUrl: jobData.applicationUrl,
        applicationEmail: jobData.applicationEmail
      })

      // Select required skills
      await helpers.selectJobSkills(['React', 'Node.js', 'TypeScript', 'AWS'])

      await helpers.takeScreenshot('job-form-completed')
    })

    test.step('Form validation testing', async () => {
      // Test required field validation
      await helpers.clearFormField('[data-testid="job-title-input"]')
      await helpers.clickSubmitButton()
      
      await helpers.verifyValidationError('[data-testid="title-error"]', /title is required/i)
      
      // Fix validation error
      await helpers.fillFormField('[data-testid="job-title-input"]', 'Senior Full Stack Developer - E2E Test')

      // Test salary range validation
      await helpers.fillFormField('[data-testid="salary-min-input"]', '150')
      await helpers.fillFormField('[data-testid="salary-max-input"]', '100')
      await helpers.clickSubmitButton()
      
      await helpers.verifyValidationError('[data-testid="salary-error"]', /maximum salary must be greater than minimum/i)
      
      // Fix salary validation
      await helpers.fillFormField('[data-testid="salary-max-input"]', '200')

      await helpers.takeScreenshot('validation-errors-fixed')
    })

    test.step('URL validation and external link testing', async () => {
      // Test invalid URL
      await helpers.fillFormField('[data-testid="application-url-input"]', 'invalid-url-format')
      await helpers.blurFormField('[data-testid="application-url-input"]')
      
      await helpers.verifyValidationError('[data-testid="url-error"]', /invalid url/i)
      
      // Test valid URL
      await helpers.fillFormField('[data-testid="application-url-input"]', 'https://valid-company.com/apply')
      await helpers.blurFormField('[data-testid="application-url-input"]')
      
      await helpers.verifyElementNotExists('[data-testid="url-error"]')

      // Test URL accessibility (optional - could be behind feature flag)
      if (await helpers.elementExists('[data-testid="test-url-button"]')) {
        await helpers.clickElement('[data-testid="test-url-button"]')
        await helpers.waitForElement('[data-testid="url-test-result"]')
        
        const urlTestResult = await page.textContent('[data-testid="url-test-result"]')
        expect(urlTestResult).toMatch(/url is accessible|warning: could not verify/i)
      }

      await helpers.takeScreenshot('url-validation-completed')
    })

    test.step('Preview and validation', async () => {
      // Open job preview
      if (await helpers.elementExists('[data-testid="preview-button"]')) {
        await helpers.clickElement('[data-testid="preview-button"]')
        await helpers.waitForElement('[data-testid="job-preview-modal"]')
        
        // Verify preview content
        await helpers.verifyTextContent('[data-testid="preview-title"]', 'Senior Full Stack Developer - E2E Test')
        await helpers.verifyTextContent('[data-testid="preview-company"]', 'E2E Testing Corp')
        await helpers.verifyTextContent('[data-testid="preview-location"]', 'San Francisco, CA')
        await helpers.verifyTextContent('[data-testid="preview-salary"]', '$90 - $200/hr')
        
        // Verify skills are displayed
        await helpers.verifyElementExists('[data-testid="skill-React"]')
        await helpers.verifyElementExists('[data-testid="skill-Node.js"]')
        
        await helpers.takeScreenshot('job-preview-modal')
        
        // Close preview
        await helpers.clickElement('[data-testid="close-preview-button"]')
        await helpers.verifyElementNotExists('[data-testid="job-preview-modal"]')
      }
    })

    test.step('Submission and publication', async () => {
      // Submit the job posting
      await helpers.clickSubmitButton()
      
      // Verify loading state
      await helpers.verifyElementExists('[data-testid="submission-loading"]')
      await helpers.verifyTextContent('[data-testid="submit-button"]', /posting|saving/i)
      
      // Wait for success
      await helpers.waitForElement('[data-testid="submission-success"]', { timeout: 10000 })
      
      // Verify success message
      await helpers.verifyTextContent('[data-testid="success-message"]', /job posted successfully/i)
      
      // Should redirect to job detail page or dashboard
      await helpers.waitForURL(/\/jobs\/[a-zA-Z0-9-]+/)
      
      await helpers.takeScreenshot('job-posted-successfully')
    })

    test.step('Post-publication validation', async () => {
      // Navigate to public job listings
      await helpers.navigateToJobListings()
      
      // Search for the posted job
      await helpers.performJobSearch('Senior Full Stack Developer - E2E Test')
      
      // Verify job appears in public listings
      await helpers.verifyElementExists('[data-testid="job-card"]')
      await helpers.verifyTextContent('[data-testid="job-card"] [data-testid="job-title"]', 'Senior Full Stack Developer - E2E Test')
      await helpers.verifyTextContent('[data-testid="job-card"] [data-testid="job-company"]', 'E2E Testing Corp')
      
      // Click on job to view details
      await helpers.clickElement('[data-testid="job-card"] [data-testid="view-job-link"]')
      
      // Verify job detail page
      await helpers.waitForElement('[data-testid="job-detail"]')
      await helpers.verifyTextContent('[data-testid="job-detail-title"]', 'Senior Full Stack Developer - E2E Test')
      await helpers.verifyTextContent('[data-testid="job-detail-description"]', /experienced full stack developer/i)
      
      // Verify application links
      await helpers.verifyElementExists('[data-testid="apply-url-button"]')
      const applyUrlButton = await page.locator('[data-testid="apply-url-button"]')
      expect(await applyUrlButton.getAttribute('href')).toBe('https://valid-company.com/apply')
      
      await helpers.takeScreenshot('job-detail-page-verified')
    })

    test.step('Employer dashboard verification', async () => {
      // Navigate to employer dashboard
      await helpers.navigateToEmployerDashboard()
      
      // Verify job appears in employer's jobs list
      await helpers.verifyElementExists('[data-testid="employer-jobs-list"]')
      await helpers.verifyTextContent('[data-testid="job-item"] [data-testid="job-title"]', 'Senior Full Stack Developer - E2E Test')
      
      // Verify job statistics
      await helpers.verifyElementExists('[data-testid="job-views-count"]')
      await helpers.verifyElementExists('[data-testid="job-applications-count"]')
      
      // Test job management actions
      await helpers.verifyElementExists('[data-testid="edit-job-button"]')
      await helpers.verifyElementExists('[data-testid="pause-job-button"]')
      await helpers.verifyElementExists('[data-testid="delete-job-button"]')
      
      await helpers.takeScreenshot('employer-dashboard-with-posted-job')
    })

    test.step('Job editing capability test', async () => {
      // Click edit job button
      await helpers.clickElement('[data-testid="edit-job-button"]')
      
      // Should navigate to edit form
      await helpers.waitForElement('[data-testid="job-post-form"]')
      await helpers.verifyTextContent('[data-testid="form-title"]', /edit job/i)
      
      // Verify form is pre-populated
      const titleInput = page.locator('[data-testid="job-title-input"]')
      expect(await titleInput.inputValue()).toBe('Senior Full Stack Developer - E2E Test')
      
      // Make a small edit
      await helpers.fillFormField('[data-testid="job-title-input"]', 'Senior Full Stack Developer - Updated')
      
      // Save changes
      await helpers.clickElement('[data-testid="update-job-button"]')
      
      // Verify update success
      await helpers.waitForElement('[data-testid="update-success"]')
      
      await helpers.takeScreenshot('job-edit-completed')
    })
  })

  test('Job posting workflow with edge cases and error scenarios', async ({ page }) => {
    test.step('Network error handling during submission', async () => {
      await helpers.loginAsEmployer()
      await helpers.navigateToJobPosting()
      
      // Fill form with valid data
      await helpers.fillJobBasicInfo({
        title: 'Network Error Test Job',
        company: 'Test Company',
        description: 'Testing network error handling'
      })
      
      await helpers.fillCompensationDetails({
        minRate: '50',
        maxRate: '100'
      })
      
      await helpers.fillApplicationDetails({
        applicationUrl: 'https://test-company.com/apply'
      })
      
      // Simulate network failure
      await page.route('**/api/jobs', route => {
        route.abort('failed')
      })
      
      await helpers.clickSubmitButton()
      
      // Verify error handling
      await helpers.waitForElement('[data-testid="submission-error"]')
      await helpers.verifyTextContent('[data-testid="error-message"]', /network error|failed to submit/i)
      
      // Verify form remains editable
      await helpers.verifyElementEnabled('[data-testid="submit-button"]')
      
      await helpers.takeScreenshot('network-error-handling')
    })

    test.step('Maximum field length testing', async () => {
      await helpers.loginAsEmployer()
      await helpers.navigateToJobPosting()
      
      // Test title length limit
      const longTitle = 'A'.repeat(201) // Assuming 200 char limit
      await helpers.fillFormField('[data-testid="job-title-input"]', longTitle)
      
      // Verify character counter
      await helpers.verifyTextContent('[data-testid="title-char-count"]', /201\/200/)
      
      // Verify submission is blocked
      await helpers.clickSubmitButton()
      await helpers.verifyValidationError('[data-testid="title-length-error"]', /too long/i)
      
      // Test description length limit  
      const longDescription = 'A'.repeat(5001) // Assuming 5000 char limit
      await helpers.fillFormField('[data-testid="description-textarea"]', longDescription)
      
      await helpers.verifyTextContent('[data-testid="description-char-count"]', /5001\/5000/)
      await helpers.verifyElementDisabled('[data-testid="submit-button"]')
      
      await helpers.takeScreenshot('field-length-validation')
    })

    test.step('Special characters and formatting validation', async () => {
      await helpers.loginAsEmployer()
      await helpers.navigateToJobPosting()
      
      const specialCharData = {
        title: 'Senior C++ Developer & Team Lead (Remote)',
        company: 'Tech@Corp 2024',
        description: 'Looking for:\n• React/Next.js expertise\n• Node.js & Express knowledge\n• Strong problem-solving skills\n\nWe offer:\n- Competitive salary\n- Remote work flexibility\n- Great team culture!',
        requirements: 'Required:\n1. 5+ years C++ experience\n2. Object-oriented design\n3. Multi-threading knowledge\n\nPreferred:\n- PhD in Computer Science\n- Open source contributions'
      }

      // Fill form with special characters
      await helpers.fillJobBasicInfo(specialCharData)
      await helpers.fillCompensationDetails({ minRate: '80', maxRate: '120' })
      await helpers.fillApplicationDetails({ applicationUrl: 'https://tech-corp.com/apply' })
      
      // Submit and verify success
      await helpers.clickSubmitButton()
      await helpers.waitForElement('[data-testid="submission-success"]')
      
      // Navigate to job detail and verify formatting is preserved
      await helpers.navigateToJobDetail()
      await helpers.verifyTextContent('[data-testid="job-title"]', specialCharData.title)
      await helpers.verifyElementContainsText('[data-testid="job-description"]', 'Looking for:')
      await helpers.verifyElementContainsText('[data-testid="job-description"]', '• React/Next.js')
      
      await helpers.takeScreenshot('special-characters-preserved')
    })

    test.step('Duplicate job posting prevention', async () => {
      const employer = await dbTestHelper.createTestUser('employer')
      await helpers.loginAsEmployer()
      
      // Create first job
      const jobData = {
        title: 'Duplicate Test Job',
        company: 'Test Company',
        description: 'Testing duplicate prevention'
      }
      
      await helpers.navigateToJobPosting()
      await helpers.fillJobBasicInfo(jobData)
      await helpers.fillCompensationDetails({ minRate: '60', maxRate: '90' })
      await helpers.fillApplicationDetails({ applicationUrl: 'https://test.com/apply' })
      
      await helpers.clickSubmitButton()
      await helpers.waitForElement('[data-testid="submission-success"]')
      
      // Try to create identical job immediately
      await helpers.navigateToJobPosting()
      await helpers.fillJobBasicInfo(jobData)
      await helpers.fillCompensationDetails({ minRate: '60', maxRate: '90' })
      await helpers.fillApplicationDetails({ applicationUrl: 'https://test.com/apply' })
      
      await helpers.clickSubmitButton()
      
      // Should show duplicate warning or confirmation dialog
      if (await helpers.elementExists('[data-testid="duplicate-job-warning"]')) {
        await helpers.verifyTextContent('[data-testid="duplicate-job-warning"]', /similar job posting/i)
        
        // User can choose to proceed anyway
        await helpers.clickElement('[data-testid="proceed-anyway-button"]')
        await helpers.waitForElement('[data-testid="submission-success"]')
      }
      
      await helpers.takeScreenshot('duplicate-job-handling')
    })
  })

  test('Mobile responsive job posting workflow', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 })
    
    test.step('Mobile form interaction', async () => {
      await helpers.loginAsEmployer()
      await helpers.navigateToJobPosting()
      
      // Verify mobile layout
      await helpers.verifyElementExists('[data-testid="mobile-job-form"]')
      
      // Test mobile form sections collapse/expand
      await helpers.clickElement('[data-testid="compensation-section-header"]')
      await helpers.verifyElementHidden('[data-testid="compensation-fields"]')
      
      await helpers.clickElement('[data-testid="compensation-section-header"]')
      await helpers.verifyElementVisible('[data-testid="compensation-fields"]')
      
      // Test mobile skill selection
      await helpers.clickElement('[data-testid="skills-section-header"]')
      await helpers.verifyElementVisible('[data-testid="skills-grid"]')
      
      // Select skills using touch interaction
      await helpers.tapElement('[data-testid="skill-React"]')
      await helpers.tapElement('[data-testid="skill-Node.js"]')
      
      // Verify skills are selected
      await helpers.verifyElementHasClass('[data-testid="skill-React"]', 'selected')
      
      await helpers.takeScreenshot('mobile-job-form-interaction')
    })

    test.step('Mobile form submission', async () => {
      // Fill minimal required fields
      await helpers.fillJobBasicInfo({
        title: 'Mobile Test Job',
        company: 'Mobile Corp',
        description: 'Testing mobile job posting'
      })
      
      await helpers.fillCompensationDetails({
        minRate: '70',
        maxRate: '110'
      })
      
      await helpers.fillApplicationDetails({
        applicationEmail: 'mobile@test.com'
      })
      
      // Submit on mobile
      await helpers.scrollToElement('[data-testid="submit-button"]')
      await helpers.tapElement('[data-testid="submit-button"]')
      
      // Verify mobile success state
      await helpers.waitForElement('[data-testid="mobile-success-message"]')
      
      await helpers.takeScreenshot('mobile-submission-success')
    })
  })

  test('Accessibility compliance in job posting workflow', async ({ page }) => {
    test.step('Keyboard navigation testing', async () => {
      await helpers.loginAsEmployer()
      await helpers.navigateToJobPosting()
      
      // Test tab navigation through form
      await page.keyboard.press('Tab') // Focus first input
      await helpers.verifyElementFocused('[data-testid="job-title-input"]')
      
      await page.keyboard.press('Tab') // Next input
      await helpers.verifyElementFocused('[data-testid="company-input"]')
      
      // Test form completion via keyboard only
      await page.keyboard.type('Accessibility Test Job')
      await page.keyboard.press('Tab')
      await page.keyboard.type('A11y Corp')
      
      // Continue tabbing and filling form
      await helpers.navigateFormViaKeyboard({
        description: 'Testing accessibility compliance',
        minRate: '80',
        maxRate: '120'
      })
      
      // Submit via keyboard
      await helpers.focusElement('[data-testid="submit-button"]')
      await page.keyboard.press('Enter')
      
      await helpers.waitForElement('[data-testid="submission-success"]')
      
      await helpers.takeScreenshot('keyboard-navigation-success')
    })

    test.step('Screen reader compatibility', async () => {
      await helpers.loginAsEmployer()
      await helpers.navigateToJobPosting()
      
      // Verify ARIA labels and roles
      await helpers.verifyElementHasAttribute('[data-testid="job-post-form"]', 'role', 'form')
      await helpers.verifyElementHasAttribute('[data-testid="job-title-input"]', 'aria-required', 'true')
      
      // Verify fieldset groupings
      await helpers.verifyElementExists('[data-testid="basic-info-fieldset"]')
      await helpers.verifyElementHasAttribute('[data-testid="basic-info-fieldset"]', 'role', 'group')
      
      // Test error message accessibility
      await helpers.clickSubmitButton() // Trigger validation
      
      const errorElement = await page.locator('[data-testid="title-error"]')
      await helpers.verifyElementHasAttribute('[data-testid="title-error"]', 'role', 'alert')
      await helpers.verifyElementHasAttribute('[data-testid="title-error"]', 'aria-live', 'polite')
      
      await helpers.takeScreenshot('accessibility-validation')
    })
  })
})