// Generated by /test-generate-job-board --api jobs
// Integration tests for Jobs API endpoints

import { GET, POST } from '../../../src/app/api/jobs/route'
import { NextRequest } from 'next/server'

// Mock Supabase
const mockSupabaseClient = {
  from: jest.fn().mockReturnThis(),
  select: jest.fn().mockReturnThis(),
  eq: jest.fn().mockReturnThis(),
  or: jest.fn().mockReturnThis(),
  gte: jest.fn().mockReturnThis(),
  lte: jest.fn().mockReturnThis(),
  order: jest.fn().mockReturnThis(),
  range: jest.fn().mockReturnThis(),
  insert: jest.fn().mockReturnThis(),
  single: jest.fn().mockReturnThis(),
  auth: {
    getUser: jest.fn()
  }
}

// Mock the createServerSupabaseClient function
jest.mock('../../../src/lib/supabase', () => ({
  createServerSupabaseClient: jest.fn(() => mockSupabaseClient)
}))

describe('Jobs API Integration Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('GET /api/jobs', () => {
    it('returns paginated job listings', async () => {
      // Mock successful database response
      const mockJobs = [
        {
          id: 'job-1',
          title: 'Senior React Developer',
          company: 'Tech Corp',
          location: 'San Francisco, CA',
          is_remote: false,
          job_type: 'CONTRACT',
          hourly_rate_min: 80,
          hourly_rate_max: 120
        }
      ]

      // Mock the database query chain
      const mockQuery = {
        data: mockJobs,
        error: null,
        count: 1
      }

      // Mock the chained query methods
      mockSupabaseClient.from.mockReturnValue({
        select: jest.fn().mockReturnValue({
          eq: jest.fn().mockReturnValue({
            or: jest.fn().mockReturnValue({
              order: jest.fn().mockReturnValue({
                range: jest.fn().mockResolvedValue(mockQuery)
              })
            })
          })
        })
      })

      const request = new NextRequest('http://localhost:3000/api/jobs')
      const response = await GET(request)
      const data = await response.json()

      expect(response.status).toBe(200)
      expect(data).toHaveProperty('jobs')
      expect(data).toHaveProperty('pagination')
      expect(data.jobs).toHaveLength(1)
    })

    it('handles search filtering', async () => {
      const mockJobs = []
      const mockQuery = { data: mockJobs, error: null, count: 0 }

      mockSupabaseClient.from.mockReturnValue({
        select: jest.fn().mockReturnValue({
          eq: jest.fn().mockReturnValue({
            or: jest.fn().mockReturnValue({
              order: jest.fn().mockReturnValue({
                range: jest.fn().mockResolvedValue(mockQuery)
              })
            })
          })
        })
      })

      const request = new NextRequest('http://localhost:3000/api/jobs?search=React')
      const response = await GET(request)
      const data = await response.json()

      expect(response.status).toBe(200)
      expect(data.jobs).toEqual([])
    })

    it('handles database errors gracefully', async () => {
      mockSupabaseClient.from.mockReturnValue({
        select: jest.fn().mockReturnValue({
          eq: jest.fn().mockReturnValue({
            or: jest.fn().mockReturnValue({
              order: jest.fn().mockReturnValue({
                range: jest.fn().mockRejectedValue(new Error('Database error'))
              })
            })
          })
        })
      })

      const request = new NextRequest('http://localhost:3000/api/jobs')
      const response = await GET(request)

      expect(response.status).toBe(500)
    })
  })

  describe('POST /api/jobs', () => {
    const validJobData = {
      title: 'Test Job',
      description: 'Test job description',
      company: 'Test Company',
      location: 'Test Location',
      isRemote: false,
      jobType: 'CONTRACT',
      hourlyRateMin: 50,
      hourlyRateMax: 100,
      currency: 'USD',
      applicationUrl: 'https://example.com/apply'
    }

    it('creates a job with valid authentication', async () => {
      // Mock authentication
      mockSupabaseClient.auth.getUser.mockResolvedValue({
        data: { user: { id: 'user-1' } },
        error: null
      })

      // Mock user profile lookup
      mockSupabaseClient.from.mockReturnValueOnce({
        select: jest.fn().mockReturnValue({
          eq: jest.fn().mockReturnValue({
            single: jest.fn().mockResolvedValue({
              data: { id: 'user-1', name: 'Test User' },
              error: null
            })
          })
        })
      })

      // Mock job creation
      mockSupabaseClient.from.mockReturnValueOnce({
        insert: jest.fn().mockReturnValue({
          select: jest.fn().mockReturnValue({
            single: jest.fn().mockResolvedValue({
              data: { id: 'job-1', ...validJobData },
              error: null
            })
          })
        })
      })

      const request = new NextRequest('http://localhost:3000/api/jobs', {
        method: 'POST',
        body: JSON.stringify(validJobData),
        headers: {
          'Content-Type': 'application/json',
          'authorization': 'Bearer valid-token'
        }
      })

      const response = await POST(request)
      const data = await response.json()

      expect(response.status).toBe(201)
      expect(data).toHaveProperty('id')
      expect(data.title).toBe(validJobData.title)
    })

    it('rejects unauthorized requests', async () => {
      const request = new NextRequest('http://localhost:3000/api/jobs', {
        method: 'POST',
        body: JSON.stringify(validJobData),
        headers: {
          'Content-Type': 'application/json'
        }
      })

      const response = await POST(request)
      expect(response.status).toBe(401)
    })

    it('validates required fields', async () => {
      const incompleteJobData = {
        title: 'Test Job'
        // Missing other required fields
      }

      const request = new NextRequest('http://localhost:3000/api/jobs', {
        method: 'POST',
        body: JSON.stringify(incompleteJobData),
        headers: {
          'Content-Type': 'application/json',
          'authorization': 'Bearer valid-token'
        }
      })

      const response = await POST(request)
      expect(response.status).toBe(400)
    })
  })
})